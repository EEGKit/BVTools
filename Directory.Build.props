<Project>

  <PropertyGroup>
    <LangVersion>11.0</LangVersion>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <NeutralLanguage>en</NeutralLanguage>
  </PropertyGroup>

  <PropertyGroup>
    <Authors>Brain Products BVLab Team</Authors>
    <Company>Brain Products GmbH</Company>
    <Copyright>CopyrightÂ© Brain Products GmbH $([System.DateTime]::Now.Year)</Copyright>
  </PropertyGroup>

  <PropertyGroup Condition="'$(ProductId)'=='BrainVisionToBidsConverterCLI'">
    <Product>BV2BIDS</Product>

    <VersionPrefix>1.0.0</VersionPrefix>
    <VersionSuffix></VersionSuffix>
    <VersionSuffixWithSeparator Condition="'$(VersionSuffix)'!=''">.$(VersionSuffix)</VersionSuffixWithSeparator>
    <AutoGeneratedBuildVersion>$([System.DateTime]::Now.Subtract($([System.DateTime]::Parse("2019.11.30"))).Days)</AutoGeneratedBuildVersion>

    <AssemblyVersion>$(VersionPrefix).0</AssemblyVersion>
    <FileVersion>$(VersionPrefix).$(AutoGeneratedBuildVersion)</FileVersion>
    <InformationalVersion>$(VersionPrefix)$(VersionSuffixWithSeparator)</InformationalVersion>
  </PropertyGroup>

  <!-- Common repo directories -->
  <PropertyGroup>
    <RepoRoot>$(MSBuildThisFileDirectory)</RepoRoot>
    <SourceDir>$(RepoRoot)src\</SourceDir>

    <!-- NuGet Input Directories -->
    <PackagesDir>$(DotNetRestorePackagesPath)</PackagesDir>
    <PackagesDir Condition="'$(PackagesDir)'==''">$(RepoRoot)../NuGet/packages/</PackagesDir>
    <RestorePackagesPath>$(PackagesDir)</RestorePackagesPath>

    <!-- Code Analysis -->
    <IsTestProject>$(MSBuildProjectName.EndsWith(".Tests"))</IsTestProject>
    <CodeAnalysisRuleset Condition="'$(IsTestProject)'=='False'">$(RepoRoot)CodeAnalysis.ruleset</CodeAnalysisRuleset>
    <CodeAnalysisRuleset Condition="'$(IsTestProject)'=='True'">$(RepoRoot)CodeAnalysis-Tests.ruleset</CodeAnalysisRuleset>
  </PropertyGroup>

  <!-- Set up the default output and intermediate paths -->
  <PropertyGroup>
    <!-- Output directories -->
    <OutputDir Condition="'$(OutputDir)'==''">$(RepoRoot)out\</OutputDir>
    <BinDir Condition="'$(BinDir)'==''">$(OutputDir)bin\</BinDir>
    <ObjDir Condition="'$(ObjDir)'==''">$(OutputDir)obj\</ObjDir>

    <!-- bin -->
    <BaseOutputPath Condition="'$(BaseOutputPath)'==''">$(BinDir)</BaseOutputPath>
    <OutputPath Condition="'$(OutputPath)'==''">$(BaseOutputPath)$(PlatformConfig)\$(MSBuildProjectName)\$(Configuration)\</OutputPath>

    <!-- obj -->
    <RootIntermediateOutputPath Condition="'$(RootIntermediateOutputPath)'==''">$(ObjDir)</RootIntermediateOutputPath>
    <IntermediateOutputRootPath Condition="'$(IntermediateOutputRootPath)' == ''">$(RootIntermediateOutputPath)$(PlatformConfig)\</IntermediateOutputRootPath>
    <IntermediateOutputPath Condition="'$(IntermediateOutputPath)' == ''">$(IntermediateOutputRootPath)$(MSBuildProjectName)\$(Configuration)\</IntermediateOutputPath>
    <BaseIntermediateOutputPath Condition="'$(BaseIntermediateOutputPath)' == ''">$(IntermediateOutputRootPath)$(MSBuildProjectName)\</BaseIntermediateOutputPath>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="System.Memory" Version="4.5.5" />
    <!--xunit itself-->
    <PackageReference Condition="'$(IsTestProject)'=='True'" Include="xunit" Version="2.4.2" />
    <!--it takes the dependency of nuget package Microsoft.TestPlatform.TestHost which is needed to run the test-->
    <PackageReference Condition="'$(IsTestProject)'=='True'" Include="Microsoft.NET.Test.Sdk" Version="17.4.0" />

    <PackageReference Condition="'$(IsTestProject)'=='True'" Include="xunit.runner.console" Version="2.4.2">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
    <!--it discovers xUnit tests for Visual Studio-->
    <PackageReference Condition="'$(IsTestProject)'=='True'" Include="xunit.runner.visualstudio" Version="2.4.5">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
    <!-- Coverlet is a cross platform code coverage library for .NET, with support for line, branch and method coverage. -->
    <PackageReference Condition="'$(IsTestProject)'=='True'" Include="coverlet.collector" Version="3.2.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <!-- Code Analysis -->
  <PropertyGroup>
    <AnalysisMode>AllEnabledByDefault</AnalysisMode>
  </PropertyGroup>

</Project>
