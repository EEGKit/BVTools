<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Channel" xml:space="preserve">
    <value>Channel</value>
  </data>
  <data name="ChannelInfoIncomplete" xml:space="preserve">
    <value>Channel info is incomplete:</value>
  </data>
  <data name="ChannelInfosDoNotMatchNumberOfChannels" xml:space="preserve">
    <value>Channel list doesn't match NumberOfChannels.</value>
  </data>
  <data name="ChannelInfoWithSurplusItems" xml:space="preserve">
    <value>Channel info contains unrecognized surplus items:</value>
  </data>
  <data name="CoordinatesCannotBeParsed" xml:space="preserve">
    <value>One of the coordinates cannot be parsed:</value>
  </data>
  <data name="CoordinatesDoNotMatchNumberOfChannels" xml:space="preserve">
    <value>Coordinates list doesn't match NumberOfChannels.</value>
  </data>
  <data name="CoordinatesIncomplete" xml:space="preserve">
    <value>Coordinates are incomplete:</value>
  </data>
  <data name="CoordinatesWithSurplusItems" xml:space="preserve">
    <value>Coordinates contain unrecognized surplus items:</value>
  </data>
  <data name="DuplicatedKey" xml:space="preserve">
    <value>Duplicated key:</value>
  </data>
  <data name="DuplicatedSection" xml:space="preserve">
    <value>Duplicated section:</value>
  </data>
  <data name="FileNameCannotBeEmpty" xml:space="preserve">
    <value>File name cannot be empty:</value>
  </data>
  <data name="InvalidLine" xml:space="preserve">
    <value>Invalid line. Expected key=keyValue syntax:</value>
  </data>
  <data name="Line" xml:space="preserve">
    <value>Line</value>
  </data>
  <data name="MandatoryKeyNotPresent" xml:space="preserve">
    <value>Mandatory key not found:</value>
  </data>
  <data name="MandatorySectionNotPresent" xml:space="preserve">
    <value>Mandatory section not found:</value>
  </data>
  <data name="NonConsecutiveChannelNumber" xml:space="preserve">
    <value>Nonconsecutive channel number:</value>
  </data>
  <data name="SegmentationTypeMustNotBeNotSegmented" xml:space="preserve">
    <value>SegmentationType must not be NOTSEGMENTED.</value>
  </data>
  <data name="StandardExceptionText" xml:space="preserve">
    <value>File content does not comply with the BrainVision Core Data format.</value>
  </data>
  <data name="UnrecognizedFileExtension" xml:space="preserve">
    <value>Unrecognized file extension. Expected:</value>
  </data>
  <data name="UnrecognizedIdentificationText" xml:space="preserve">
    <value>Unrecognized identification text. Expected:</value>
  </data>
  <data name="UnrecognizedKey" xml:space="preserve">
    <value>Unrecognized key:</value>
  </data>
  <data name="UnrecognizedKeyValue" xml:space="preserve">
    <value>Unrecognized key value:</value>
  </data>
  <data name="UnrecognizedSection" xml:space="preserve">
    <value>Unrecognized section:</value>
  </data>
  <data name="UnsupportedVersion" xml:space="preserve">
    <value>Unsupported version detected:</value>
  </data>
  <data name="ValueCannotBeEmpty" xml:space="preserve">
    <value>Value cannot be empty:</value>
  </data>
  <data name="ValueCannotBeNegative" xml:space="preserve">
    <value>Value cannot be negative:</value>
  </data>
  <data name="ValueCannotBeNegativeOrZero" xml:space="preserve">
    <value>Value cannot be zero or negative:</value>
  </data>
  <data name="ValueCannotBeParsed" xml:space="preserve">
    <value>Value cannot be parsed:</value>
  </data>
</root>